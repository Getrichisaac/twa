"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4436],{7522:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>_});var n=a(9901);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,p=function(e,t){if(null==e)return{};var a,n,p={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(p[a]=e[a]);return p}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(p[a]=e[a])}return p}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,p=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(a),_=p,m=u["".concat(l,".").concat(_)]||u[_]||d[_]||o;return a?n.createElement(m,r(r({ref:t},c),{},{components:a})):n.createElement(m,r({ref:t},c))}));function _(e,t){var a=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var o=a.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:p,r[1]=i;for(var s=2;s<o;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9056:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(5402),p=(a(9901),a(7522));const o={sidebar_position:2},r="Methods",i={unversionedId:"apps-communication/methods",id:"apps-communication/methods",title:"Methods",description:"Web Apps methods are events, which execute some action. They are always called",source:"@site/docs/apps-communication/methods.md",sourceDirName:"apps-communication",slug:"/apps-communication/methods",permalink:"/twa/docs/apps-communication/methods",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"How it works",permalink:"/twa/docs/apps-communication/how-it-works"},next:{title:"Events",permalink:"/twa/docs/apps-communication/events"}},l={},s=[{value:"Web",id:"web",level:2},{value:"Desktop and mobile",id:"desktop-and-mobile",level:2},{value:"Windows Phone",id:"windows-phone",level:2},{value:"Available methods",id:"available-methods",level:2},{value:"v6.0",id:"v60",level:3},{value:"<code>iframe_ready</code>",id:"iframe_ready",level:4},{value:"<code>web_app_close</code>",id:"web_app_close",level:4},{value:"<code>web_app_data_send</code>",id:"web_app_data_send",level:4},{value:"<code>web_app_expand</code>",id:"web_app_expand",level:4},{value:"<code>web_app_open_link</code>",id:"web_app_open_link",level:4},{value:"<code>web_app_ready</code>",id:"web_app_ready",level:4},{value:"<code>web_app_request_theme</code>",id:"web_app_request_theme",level:4},{value:"<code>web_app_request_viewport</code>",id:"web_app_request_viewport",level:4},{value:"<code>web_app_setup_main_button</code>",id:"web_app_setup_main_button",level:4},{value:"<code>web_app_setup_closing_behavior</code>",id:"web_app_setup_closing_behavior",level:4},{value:"v6.1",id:"v61",level:3},{value:"<code>web_app_open_tg_link</code>",id:"web_app_open_tg_link",level:4},{value:"<code>web_app_open_invoice</code>",id:"web_app_open_invoice",level:4},{value:"<code>web_app_setup_back_button</code>",id:"web_app_setup_back_button",level:4},{value:"<code>web_app_set_background_color</code>",id:"web_app_set_background_color",level:4},{value:"<code>web_app_set_header_color</code>",id:"web_app_set_header_color",level:4},{value:"<code>web_app_trigger_haptic_feedback</code>",id:"web_app_trigger_haptic_feedback",level:4},{value:"v6.2",id:"v62",level:3},{value:"<code>web_app_open_popup</code>",id:"web_app_open_popup",level:4},{value:"v6.4",id:"v64",level:3},{value:"<code>web_app_open_scan_qr_popup</code>",id:"web_app_open_scan_qr_popup",level:4},{value:"<code>web_app_close_scan_qr_popup</code>",id:"web_app_close_scan_qr_popup",level:4},{value:"<code>web_app_read_text_from_clipboard</code>",id:"web_app_read_text_from_clipboard",level:4}],c={toc:s};function d(e){let{components:t,...a}=e;return(0,p.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"methods"},"Methods"),(0,p.kt)("p",null,"Web Apps methods are events, which execute some action. They are always called\nby Web App."),(0,p.kt)("h2",{id:"web"},"Web"),(0,p.kt)("p",null,"As long as the web version of Telegram displays the front-end application in\n",(0,p.kt)("inlineCode",{parentName:"p"},"<iframe/>")," tag, it uses the default way of communication between 2 iframes -\nsending messages through ",(0,p.kt)("inlineCode",{parentName:"p"},"window.parent.postMessage")," function."),(0,p.kt)("p",null,"As the first parameter, you should pass a JSON object\n",(0,p.kt)("strong",{parentName:"p"},"converted to a string"),". The object should have this interface:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"interface MessageJSON {\n  eventType: string;\n  eventData: any;\n}\n")),(0,p.kt)("p",null,"The second parameter is ",(0,p.kt)("inlineCode",{parentName:"p"},"targetOrigin")," - allowed parent iframe origin. We\nrecommend avoiding the usage of wildcard ",(0,p.kt)("inlineCode",{parentName:"p"},"*")," as long as it is not secure - your\napplication could be inserted not by Telegram, but by another iframe that will\nstill be able to communicate with your app and receive some data."),(0,p.kt)("p",null,"As a default value, you could use ",(0,p.kt)("inlineCode",{parentName:"p"},"https://web.telegram.org"),"."),(0,p.kt)("p",null,"So, as you see, each method has its own name expressed by ",(0,p.kt)("inlineCode",{parentName:"p"},"eventType")," and\nparameters stored in ",(0,p.kt)("inlineCode",{parentName:"p"},"eventData")," property. Here is the usage example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"window.parent.postMessage(JSON.stringify({\n  eventType: 'web_app_setup_back_button',\n  eventData: {is_visible: true},\n}), 'https://web.telegram.org');\n")),(0,p.kt)("p",null,"This code will make the Telegram back button appear. We will define the back\nbutton and other components in the next sections of the documentation."),(0,p.kt)("h2",{id:"desktop-and-mobile"},"Desktop and mobile"),(0,p.kt)("p",null,"Unlike the web, desktop and mobile applications use a bit more unusual way of\ncalling methods. Both of these platforms will create a global\nfunction ",(0,p.kt)("inlineCode",{parentName:"p"},"window.TelegramWebviewProxy.postEvent(eventType: string, eventData: string)"),"."),(0,p.kt)("p",null,"As the first argument, this function accepts the event name. The second one -\nthe parameters object, converted to a string. Here is how it works:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"window.TelegramWebviewProxy.postEvent('web_app_setup_back_button', JSON.stringify({\n  is_visible: true\n}));\n")),(0,p.kt)("h2",{id:"windows-phone"},"Windows Phone"),(0,p.kt)("p",null,"Telegram Windows Phone app provides such function\nas ",(0,p.kt)("inlineCode",{parentName:"p"},"window.external.notify(message: string)"),". It accepts the same parameter as\nthe web version does:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"window.external.notify(JSON.stringify({\n  eventType: 'web_app_setup_back_button',\n  eventData: {is_visible: true},\n}))\n")),(0,p.kt)("h2",{id:"available-methods"},"Available methods"),(0,p.kt)("p",null,"This section contains a list of available methods to call with their names,\ndescription, and parameters. Section title means minimal Web App version to call\nmethods inside it. In case, Web App does not satisfy the minimal method version\nrequirement, nothing will happen. The native app just doesn't know which method\nshould be called as long as it is not defined."),(0,p.kt)("h3",{id:"v60"},"v6.0"),(0,p.kt)("h4",{id:"iframe_ready"},(0,p.kt)("inlineCode",{parentName:"h4"},"iframe_ready")),(0,p.kt)("p",null,"Notifies parent iframe about the current frame is ready. This method is only\nused in the Web version of Telegram. As a result, Web App will\nreceive ",(0,p.kt)("inlineCode",{parentName:"p"},"[set_custom_style](events#set_custom_style)")," event."),(0,p.kt)("h4",{id:"web_app_close"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_close")),(0,p.kt)("p",null,"Closes Web App."),(0,p.kt)("h4",{id:"web_app_data_send"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_data_send")),(0,p.kt)("p",null,"Sends data to the bot. When this method is called, a service message is sent to\nthe bot containing the data of the length up to 4096 bytes. Then, Web App will\nbe closed."),(0,p.kt)("p",null,"To get more information, take a look at ",(0,p.kt)("inlineCode",{parentName:"p"},"web_app_data")," field in the\nclass ",(0,p.kt)("inlineCode",{parentName:"p"},"[Message](https://core.telegram.org/bots/api#message)"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { data: string };\n")),(0,p.kt)("h4",{id:"web_app_expand"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_expand")),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"../features/viewport"},"Expands")," Web App."),(0,p.kt)("h4",{id:"web_app_open_link"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_open_link")),(0,p.kt)("p",null,"Opens link in the default browser. Web App will not be closed."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { url: string };\n")),(0,p.kt)("h4",{id:"web_app_ready"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_ready")),(0,p.kt)("p",null,"Notifies Telegram about current application is ready to be shown. This method\nwill make Telegram to remove application loader and display Web App."),(0,p.kt)("h4",{id:"web_app_request_theme"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_request_theme")),(0,p.kt)("p",null,"Requests current ",(0,p.kt)("a",{parentName:"p",href:"../features/theme"},"theme")," from Telegram. As a result, Telegram\nwill create ",(0,p.kt)("a",{parentName:"p",href:"events#theme_changed"},(0,p.kt)("inlineCode",{parentName:"a"},"theme_changed"))," event."),(0,p.kt)("h4",{id:"web_app_request_viewport"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_request_viewport")),(0,p.kt)("p",null,"Requests current ",(0,p.kt)("a",{parentName:"p",href:"../features/viewport"},"viewport")," information from Telegram. As\na result, Telegram will create ",(0,p.kt)("a",{parentName:"p",href:"events#viewport_changed"},(0,p.kt)("inlineCode",{parentName:"a"},"viewport_changed")),"\nevent."),(0,p.kt)("h4",{id:"web_app_setup_main_button"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_setup_main_button")),(0,p.kt)("p",null,"Updates ",(0,p.kt)("a",{parentName:"p",href:"../features/main-button"},"main button")," settings."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = {\n  // Should button be displayed.\n  is_visible?: boolean;\n  // Should button be enabled.\n  is_active?: boolean;\n  // Should loader inside button be displayed. Use this property in case,\n  // some opertaion takes time. This loader will make user notified about it.\n  is_progress_visible?: boolean;\n  // Text inside button.\n  text?: string;\n  // Color in #RRGGBB format.\n  color?: string;\n  // Text color in #RRGGBB format.\n  text_color?: string;\n};\n")),(0,p.kt)("h4",{id:"web_app_setup_closing_behavior"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_setup_closing_behavior")),(0,p.kt)("p",null,"Changes current ",(0,p.kt)("a",{parentName:"p",href:"../features/closing-behavior"},"closing behavior"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { need_confirmation: boolean };\n")),(0,p.kt)("h3",{id:"v61"},"v6.1"),(0,p.kt)("h4",{id:"web_app_open_tg_link"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_open_tg_link")),(0,p.kt)("p",null,"Opens Telegram link by its pathname and query parameters. Passed ",(0,p.kt)("inlineCode",{parentName:"p"},"path_full"),"\nshould be a value taken from link of this format: ",(0,p.kt)("inlineCode",{parentName:"p"},"https://t.me/{path_full}"),".\nLink will be opened in Telegram app, Web App will be closed."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { path_full: string };\n")),(0,p.kt)("h4",{id:"web_app_open_invoice"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_open_invoice")),(0,p.kt)("p",null,"Opens invoice by its specified slug. More information about invoices in\nthis ",(0,p.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/payments"},"documentation"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { slug: string };\n")),(0,p.kt)("h4",{id:"web_app_setup_back_button"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_setup_back_button")),(0,p.kt)("p",null,"Updates ",(0,p.kt)("a",{parentName:"p",href:"../features/back-button"},"back button")," settings."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { is_visible: boolean };\n")),(0,p.kt)("h4",{id:"web_app_set_background_color"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_set_background_color")),(0,p.kt)("p",null,"Updates Web\nApp ",(0,p.kt)("a",{parentName:"p",href:"../features/theme#background-and-header-colors"},"background color"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = {\n  // Color in #RRGGBB format.\n  color: string;\n};\n")),(0,p.kt)("h4",{id:"web_app_set_header_color"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_set_header_color")),(0,p.kt)("p",null,"Updates Web App ",(0,p.kt)("a",{parentName:"p",href:"../features/theme#background-and-header-colors"},"header color"),"."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { color_key: 'bg_color' | 'secondary_bg_color' };\n")),(0,p.kt)("h4",{id:"web_app_trigger_haptic_feedback"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_trigger_haptic_feedback")),(0,p.kt)("p",null,"Generates ",(0,p.kt)("a",{parentName:"p",href:"../features/haptic-feedback"},"haptic feedback")," event."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = {\n  type: 'impact',\n  /**\n   * Style of impact occurred haptic event.\n   * - `light`, indicates a collision between small or lightweight UI objects,\n   * - `medium`, indicates a collision between medium-sized or medium-weight UI objects,\n   * - `heavy`, indicates a collision between large or heavyweight UI objects,\n   * - `rigid`, indicates a collision between hard or inflexible UI objects,\n   * - `soft`, indicates a collision between soft or flexible UI objects.\n   */\n  impact_style: 'light' | 'medium' | 'heavy' | 'rigid' | 'soft',\n} | {\n  type: 'notification',\n  /**\n   * Type of notification occurred type event.\n   * - `error`, indicates that a task or action has failed,\n   * - `success`, indicates that a task or action has completed successfully,\n   * - `warning`, indicates that a task or action produced a warning.\n   */\n  notification_type: 'error' | 'success' | 'warning'\n} | {\n  type: 'selection_change'\n};\n")),(0,p.kt)("h3",{id:"v62"},"v6.2"),(0,p.kt)("h4",{id:"web_app_open_popup"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_open_popup")),(0,p.kt)("p",null,"Opens new ",(0,p.kt)("a",{parentName:"p",href:"../features/popup"},"popup"),". When user closes popup, Telegram\ncreates ",(0,p.kt)("a",{parentName:"p",href:"events#popup_closed"},(0,p.kt)("inlineCode",{parentName:"a"},"popup_closed"))," event."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},'type PopupButton = {\n  /**\n   * Identifier of the button, 0-64 characters.\n   */\n  id: string;\n} & (\n  {\n    /**\n     * Type of the button:\n     * - `default`, a button with the default style;\n     * - `destructive`, a button with a style that indicates a destructive\n     * action (e.g. "Remove", "Delete", etc.).\n     *\n     * @default "default"\n     */\n    type?: \'default\' | \'destructive\';\n\n    /**\n     * The text to be displayed on the button, 0-64 characters.\n     */\n    text: string;\n  } | {\n  /**\n   * Type of the button:\n   * - `ok`, a button with the localized text "OK";\n   * - `close`, a button with the localized text "Close";\n   * - `cancel`, a button with the localized text "Cancel".\n   */\n  type: \'ok\' | \'close\' | \'cancel\';\n});\n\ntype Parameters = {\n  /**\n   * The text to be displayed in the popup title, 0-64 characters.\n   */\n  title: string;\n  /**\n   * The message to be displayed in the body of the popup, 1-256 characters.\n   */\n  message: string;\n  /**\n   * List of buttons to be displayed in the popup, 1-3 buttons.\n   */\n  buttons: PopupButton[];\n};\n')),(0,p.kt)("h3",{id:"v64"},"v6.4"),(0,p.kt)("h4",{id:"web_app_open_scan_qr_popup"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_open_scan_qr_popup")),(0,p.kt)("p",null,"Opens QR scanner. When scanner was closed, Telegram\ncreates ",(0,p.kt)("a",{parentName:"p",href:"events#scan_qr_popup_closed"},(0,p.kt)("inlineCode",{parentName:"a"},"scan_qr_popup_closed"))," event. When\nscanner read QR, Telegram creates ",(0,p.kt)("a",{parentName:"p",href:"events#qr_text_received"},(0,p.kt)("inlineCode",{parentName:"a"},"qr_text_received")),"\nevent."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { text?: string };\n")),(0,p.kt)("h4",{id:"web_app_close_scan_qr_popup"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_close_scan_qr_popup")),(0,p.kt)("p",null,"Closes QR scanner. Telegram\ncreates ",(0,p.kt)("a",{parentName:"p",href:"events#scan_qr_popup_closed"},(0,p.kt)("inlineCode",{parentName:"a"},"scan_qr_popup_closed"))," event."),(0,p.kt)("h4",{id:"web_app_read_text_from_clipboard"},(0,p.kt)("inlineCode",{parentName:"h4"},"web_app_read_text_from_clipboard")),(0,p.kt)("p",null,"Reads text from clipboard. Method accepts request identifier which is\nused to appropriately retrieve method execution result from\n",(0,p.kt)("a",{parentName:"p",href:"events#qr_text_received"},(0,p.kt)("inlineCode",{parentName:"a"},"qr_text_received"))," event."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"type Parameters = { req_id: string };\n")))}d.isMDXComponent=!0}}]);