"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[396],{7522:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(9901);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1774:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=n(5402),i=(n(9901),n(7522));const r={},o="HapticFeedback",c={unversionedId:"libraries/twa-sdk/components/haptic-feedback",id:"libraries/twa-sdk/components/haptic-feedback",title:"HapticFeedback",description:"Controls haptic feedback. It allows calling different types of",source:"@site/docs/libraries/twa-sdk/components/haptic-feedback.md",sourceDirName:"libraries/twa-sdk/components",slug:"/libraries/twa-sdk/components/haptic-feedback",permalink:"/twa/docs/libraries/twa-sdk/components/haptic-feedback",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"ClosingConfirmation",permalink:"/twa/docs/libraries/twa-sdk/components/closing-confirmation"},next:{title:"InitData",permalink:"/twa/docs/libraries/twa-sdk/components/init-data"}},l={},p=[{value:"Init",id:"init",level:2},{value:"Notifications",id:"notifications",level:2},{value:"<code>impactOccurred</code>",id:"impactoccurred",level:3},{value:"<code>notificationOccurred</code>",id:"notificationoccurred",level:3},{value:"<code>selectionChanged</code>",id:"selectionchanged",level:3},{value:"Methods support",id:"methods-support",level:2}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hapticfeedback"},(0,i.kt)("inlineCode",{parentName:"h1"},"HapticFeedback")),(0,i.kt)("p",null,"Controls haptic feedback. It allows calling different types of\nhaptic notifications which usually occur after user interaction with\napplication."),(0,i.kt)("p",null,"To learn more, visit description of this feature\nin ",(0,i.kt)("a",{parentName:"p",href:"../../../features/haptic-feedback"},"documentation"),"."),(0,i.kt)("h2",{id:"init"},"Init"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import {HapticFeedback} from '@twa.js/sdk';\nimport {init} from '@twa.js/bridge';\n\nconst haptic = new HapticFeedback(init(), '6.3');\n")),(0,i.kt)("h2",{id:"notifications"},"Notifications"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"HapticFeedback")," supports 3 types of haptic events -\n",(0,i.kt)("inlineCode",{parentName:"p"},"impactOccurred"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"notificationOccurred")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"selectionChanged"),"."),(0,i.kt)("h3",{id:"impactoccurred"},(0,i.kt)("inlineCode",{parentName:"h3"},"impactOccurred")),(0,i.kt)("p",null,"A method tells that an impact occurred. The Telegram app may play the\nappropriate haptics based on style value passed. Style of impact occurred haptic\nevent:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"light"),", indicates a collision between small or lightweight UI objects,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"medium"),", indicates a collision between medium-sized or medium-weight UI\nobjects,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"heavy"),", indicates a collision between large or heavyweight UI objects,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rigid"),", indicates a collision between hard or inflexible UI objects,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"soft"),", indicates a collision between soft or flexible UI objects.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},"haptic.impactOccurred('medium');\n")),(0,i.kt)("h3",{id:"notificationoccurred"},(0,i.kt)("inlineCode",{parentName:"h3"},"notificationOccurred")),(0,i.kt)("p",null,"A method tells that a task or action has succeeded, failed, or produced\na warning. The Telegram app may play the appropriate haptics based on\ntype value passed. Type of notification occurred type event."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error"),", indicates that a task or action has failed,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"success"),", indicates that a task or action has completed successfully,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warning"),", indicates that a task or action produced a warning.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},"haptic.notificationOccurred('success');\n")),(0,i.kt)("h3",{id:"selectionchanged"},(0,i.kt)("inlineCode",{parentName:"h3"},"selectionChanged")),(0,i.kt)("p",null,"A method tells that the user has changed a selection. The Telegram app\nmay play the appropriate haptics."),(0,i.kt)("p",null,"Do not use this feedback when the user makes or confirms a selection;\nuse it only when the selection changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Example"',title:'"Example"'},"haptic.selectionChanged();\n")),(0,i.kt)("h2",{id:"methods-support"},"Methods support"),(0,i.kt)("p",null,"Methods available for ",(0,i.kt)("a",{parentName:"p",href:"../about#methods-support"},"support check"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"notificationOccurred")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"impactOccurred")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selectionChanged"))))}d.isMDXComponent=!0}}]);