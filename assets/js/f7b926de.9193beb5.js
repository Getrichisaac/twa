"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[280],{7522:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(5402),a=(n(9901),n(7522));const i={sidebar_position:1,sidebar_label:"About"},r="@twa.js/sdk",s={unversionedId:"libraries/twa-sdk/about",id:"libraries/twa-sdk/about",title:"@twa.js/sdk",description:"Made from scratch the TypeScript library for communication with the Telegram",source:"@site/docs/libraries/twa-sdk/about.mdx",sourceDirName:"libraries/twa-sdk",slug:"/libraries/twa-sdk/about",permalink:"/twa/docs/libraries/twa-sdk/about",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"About"},sidebar:"sidebar",previous:{title:"@twa.js/sdk-react",permalink:"/twa/docs/libraries/twa-sdk-react"},next:{title:"BackButton",permalink:"/twa/docs/libraries/twa-sdk/components/back-button"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Options",id:"options",level:3},{value:"<code>debug: boolean</code>",id:"debug-boolean",level:4},{value:"<code>checkCompat: boolean</code>",id:"checkcompat-boolean",level:4},{value:"<code>targetOrigin: string</code>",id:"targetorigin-string",level:4},{value:"Launch parameters",id:"launch-parameters",level:2},{value:"Components",id:"components",level:2},{value:"Events",id:"events",level:3},{value:"Methods support",id:"methods-support",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=c("LibraryBadges"),u=c("NpmInstall"),m={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"twajssdk"},"@twa.js/sdk"),(0,a.kt)("p",null,"Made from scratch the TypeScript library for communication with the Telegram\nWeb Apps functionality."),(0,a.kt)("p",null,"Code of this library was written with the aim to make developers communication\nwith the Telegram Web Apps way easier. It contains a lot of separate\ncomponents which are responsible for their own part of the Telegram Web Apps\necosystem."),(0,a.kt)("p",null,"Before starting to use the SDK, we highly recommend learning the Web Apps\n",(0,a.kt)("a",{parentName:"p",href:"../../introduction/web-apps"},"documentation")," to understand the platform\nconcepts."),(0,a.kt)(d,{pkg:"@twa.js/sdk",mdxType:"LibraryBadges"}),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)(u,{pkg:"@twa.js/sdk",mdxType:"NpmInstall"}),(0,a.kt)("h2",{id:"initialization"},"Initialization"),(0,a.kt)("p",null,"According to the logic, this package provides the full control over its\nlifecycle, its initialization is on the developer shoulders. It means, that\nthere are no already initialized global components which could be used by\ndeveloper, they should be created by himself."),(0,a.kt)("p",null,"To make the developer life easier, package contains special function called\n",(0,a.kt)("inlineCode",{parentName:"p"},"init")," which returns initialized components instances:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from '@twa.js/sdk';\n\ninit().then(components => {\n  // Now we have all initialized components.\n  const {mainButton, viewport} = components;\n\n  // Add main button event click which will lead to\n  // application expansion.\n  mainButton.on('click', () => viewport.expand());\n\n  // Update main button information and show it.\n  mainButton\n    .setColor('#ff0000')\n    .setTextColor('#ffffff')\n    .setText('Expand')\n    .enable()\n    .show();\n});\n")),(0,a.kt)("h3",{id:"options"},"Options"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," function is capable of accepting options, which are specified in the\nobject in the first argument of function. Each option and the options object\nitself are optional."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from '@twa.js/sdk';\n\ninit(options);\n")),(0,a.kt)("h4",{id:"debug-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"debug: boolean")),(0,a.kt)("p",null,"Enables the debug mode which leads to printing more debugging information sent\nby the SDK. This option is also passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," instance during its\ninitialization."),(0,a.kt)("h4",{id:"checkcompat-boolean"},(0,a.kt)("inlineCode",{parentName:"h4"},"checkCompat: boolean")),(0,a.kt)("p",null,"Enables the mode in which calls of the methods not supported by the current\nversion of the Web App will lead to throwing an error. This mode is\nrecommended to be used and enabled by default."),(0,a.kt)("h4",{id:"targetorigin-string"},(0,a.kt)("inlineCode",{parentName:"h4"},"targetOrigin: string")),(0,a.kt)("p",null,"This option is directly passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," during its initialization. It\nrestricts the list of parent iframes allowed to receive data from the current\napplication. To learn more about this option, follow this\n",(0,a.kt)("a",{parentName:"p",href:"../twa-bridge#target-origin"},"documentation"),"."),(0,a.kt)("h2",{id:"launch-parameters"},"Launch parameters"),(0,a.kt)("p",null,"The launch parameters are initial parameters passed to the Web App. You can\nlearn more about launch parameters in this\n",(0,a.kt)("a",{parentName:"p",href:"../../launch-params/structure"},"documentation"),"."),(0,a.kt)("p",null,"A developer is allowed to retrieve the launch parameters by the usage of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"retrieveLaunchParams")," function. Simply put, this function parses\nthe parameters starting with the ",(0,a.kt)("inlineCode",{parentName:"p"},"tgWebApp")," prefix."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {retrieveLaunchParams} from '@twa.js/sdk';\n\nconsole.log(retrieveLaunchParams());\n\n// Output:\n// {\n//   version: '6.4',\n//   initData: {\n//     authDate: Mon Feb 20 2023 04:11:25 GMT+0000,\n//     hash: 'kSJkn101-)S(djn1',\n//   },\n//   platform: 'android',\n//   themeParams: {\n//     backgroundColor: '#ffaabb',\n//     buttonColor: '#223112',\n//     buttonTextColor: '#111aa3',\n//     hintColor: '#000000',\n//     linkColor: '#ffffff',\n//     secondaryBackgroundColor: '#aaaaaa',\n//     textColor: '#bbbbbb',\n//   },\n// };\n")),(0,a.kt)("p",null,"This function needs no SDK initialization or something like that. It attempts\nto extract the launch parameters from the ",(0,a.kt)("inlineCode",{parentName:"p"},"window.location"),". In case, they are\ninvalid or missing, the function will try to extract these parameters from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"sessionStorage"),". This function is safe to be used when a user reloads Web App\nvia the ",(0,a.kt)("inlineCode",{parentName:"p"},"Reload Page")," application button."),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("p",null,"All components in this package are supposed to be used as singletons. It means,\nyou should not create several instances of the same component and use them even\nif it is not forbidden. Nevertheless, in this case, there is no warranty,\neverything will work fine."),(0,a.kt)("p",null,"The reason is, each component class stores its state locally and class instances\nare not synchronized between each other. So, for instance, in case, developer\ncreates 2 instances of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Popup")," component and one of them calls ",(0,a.kt)("inlineCode",{parentName:"p"},"open()"),"\nmethod, it will change its ",(0,a.kt)("inlineCode",{parentName:"p"},"isOpened")," property to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", but the second\ninstance of ",(0,a.kt)("inlineCode",{parentName:"p"},"Popup")," will not know about it and will still return\n",(0,a.kt)("inlineCode",{parentName:"p"},"false")," value, which is incorrect."),(0,a.kt)("p",null,"To avoid possible problems, developer can rely on package's ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," function\nwhich provides initialized components which are enough to use across the\napplication."),(0,a.kt)("h3",{id:"events"},"Events"),(0,a.kt)("p",null,"Component instances use the common way of events listening through the ",(0,a.kt)("inlineCode",{parentName:"p"},"on")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"off")," functions. Here is the example with the ",(0,a.kt)("inlineCode",{parentName:"p"},"BackButton")," component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BackButton} from '@twa.js/sdk';\n\nconst backButton = new BackButton(...);\nbackButton.on('click', () => {\n  console.log('Back button clicked.');\n});\n")),(0,a.kt)("p",null,"You can find the list of supported events in components own documentations."),(0,a.kt)("h3",{id:"methods-support"},"Methods support"),(0,a.kt)("p",null,"Almost each component is capable of checking whether its method is supported by\nthe current Web Apps version or not. To check if some methods are supported,\ndeveloper should use the component instance ",(0,a.kt)("inlineCode",{parentName:"p"},"supports()")," function. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BackButton} from '@twa.js/sdk';\nimport {Bridge} from '@twa.js/bridge';\n\nlet backButton = new BackButton(Bridge.init(), '6.0');\nconsole.log(backButton.supports('show')); // false\n\nbackButton = new BackButton(Bridge.init(), '6.3');\nconsole.log(backButton.supports('hide')); // true\n")),(0,a.kt)("p",null,"It is recommended to use this functionality before calling some component method\nas long as this will make developer sure, it will work. The list of supported\nmethods by components is described in each component documentation."))}h.isMDXComponent=!0}}]);