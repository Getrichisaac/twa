"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[342],{170:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(9901),a=n(4517);const o="tabItem_Nt9t";function r(e){let{children:t,hidden:n,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,r),hidden:n},t)}},896:(e,t,n)=>{n.d(t,{Z:()=>m});var i=n(5402),a=n(9901),o=n(4517),r=n(7214),l=n(7597),s=n(6301),p=n(4876);const d="tabList_ubQr",u="tabItem_xGh2";function c(e){var t;const{lazy:n,block:r,defaultValue:c,values:m,groupId:g,className:b}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??h.map((e=>{let{props:{value:t,label:n,attributes:i}}=e;return{value:t,label:n,attributes:i}})),k=(0,l.l)(v,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===c?c:c??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==w&&!v.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:y}=(0,s.U)(),[N,C]=(0,a.useState)(w),T=[],{blockElementScrollPositionUntilNextRender:_}=(0,p.o5)();if(null!=g){const e=f[g];null!=e&&e!==N&&v.some((t=>t.value===e))&&C(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),i=v[n].value;i!==N&&(_(t),C(i),null!=g&&y(g,String(i)))},I=e=>{var t;let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",d)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},b)},v.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:I,onClick:E},r,{className:(0,o.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,a.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,r.Z)();return a.createElement(c,(0,i.Z)({key:String(t)},e))}},3307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var i=n(5402),a=(n(9901),n(7522)),o=n(896),r=n(170),l=n(6888);const s={sidebar_position:1,sidebar_label:"twa-bridge"},p='twa-bridge <sup><img src="https://static.npmjs.com/255a118f56f5346b97e56325a1217a16.svg" alt="drawing" width="20"/></sup>',d={unversionedId:"libraries/twa-bridge",id:"libraries/twa-bridge",title:'twa-bridge <sup><img src="https://static.npmjs.com/255a118f56f5346b97e56325a1217a16.svg" alt="drawing" width="20"/></sup>',description:"Package which provides utilities to simplify communication between",source:"@site/docs/libraries/twa-bridge.mdx",sourceDirName:"libraries",slug:"/libraries/twa-bridge",permalink:"/twa/docs/libraries/twa-bridge",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"twa-bridge"},sidebar:"sidebar",previous:{title:"\ud83d\udce6 Libraries",permalink:"/twa/docs/category/-libraries"},next:{title:"twa-sdk",permalink:"/twa/docs/category/twa-sdk"}},u={},c=[{value:"Installation",id:"installation",level:2},{value:"Init",id:"init",level:2},{value:"Debugging",id:"debugging",level:2},{value:"Setting target origin",id:"setting-target-origin",level:2},{value:"Calling methods",id:"calling-methods",level:2},{value:"Without bridge",id:"without-bridge",level:3},{value:"Listening to events",id:"listening-to-events",level:2},{value:"Lower level control",id:"lower-level-control",level:2},{value:"<code>defineReceiver: boolean</code>",id:"definereceiver-boolean",level:3},{value:"<code>emitter: GlobalEventEmitter</code>",id:"emitter-globaleventemitter",level:3},{value:"Checking method support",id:"checking-method-support",level:2},{value:"Higher-level control",id:"higher-level-control",level:2}],m={toc:c};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"twa-bridge-"},"twa-bridge ",(0,a.kt)("sup",null,(0,a.kt)("img",{src:"https://static.npmjs.com/255a118f56f5346b97e56325a1217a16.svg",alt:"drawing",width:"20"}))),(0,a.kt)("p",null,"Package which provides utilities to simplify communication between\nWeb App and Telegram native application. It also solves some across-platform\ndata difference problems to protect developers code and save their time."),(0,a.kt)("div",{style:{marginBottom:10}},(0,a.kt)("a",{href:"https://npmjs.com/package/twa-bridge"},(0,a.kt)("img",{alt:"npm",src:"https://img.shields.io/npm/v/twa-bridge?logo=npm"})),(0,a.kt)("img",{alt:"size",style:{marginLeft:10},src:"https://img.shields.io/bundlephobia/minzip/twa-bridge"})),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"npm",label:"npm",default:!0,mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"bash",mdxType:"CodeBlock"},"npm i twa-bridge")),(0,a.kt)(r.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"bash",mdxType:"CodeBlock"},"yarn add twa-bridge")),(0,a.kt)(r.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"bash",mdxType:"CodeBlock"},"pnpm i twa-bridge"))),(0,a.kt)("h2",{id:"init"},"Init"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," component has rather simple API. Its main purpose is to provide\ncommunication layer between Telegram native and client applications, so you\ncould call native methods and receive events from Telegram application."),(0,a.kt)("p",null,"To start using bridge, it is enough to use ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from 'twa-bridge';\n\nconst bridge = init();\n")),(0,a.kt)("p",null,"This function will append special handler to global window object, which is\nused by Telegram native application. It is allowed to use it as many times\nas required as long as this function will just reuse once created event emitter\nand event receiving function."),(0,a.kt)("h2",{id:"debugging"},"Debugging"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," supports debug mode which outputs additional log messages into console.\nBy default, this mode is disabled. To enable it, it is required to pass\n",(0,a.kt)("inlineCode",{parentName:"p"},"debug: true")," while creating new ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from 'twa-bridge';\n\nconst bridge = init({debug: true});\n")),(0,a.kt)("p",null,"Or, in case when instance already exists, just change its ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," property\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from 'twa-bridge';\n\nconst bridge = init();\nbridge.debug = true;\n")),(0,a.kt)("p",null,"As a result, you will see logs in console with information about called\nmethods and processes."),(0,a.kt)("h2",{id:"setting-target-origin"},"Setting target origin"),(0,a.kt)("p",null,"In case, current bridge instance is used in browser environment (iframe),\nwe use such function as ",(0,a.kt)("inlineCode",{parentName:"p"},"window.parent.postMessage")," which requires passing\ntarget origin to prevent sending events to unknown parent iframes."),(0,a.kt)("p",null,"By default, bridge uses such origin as ",(0,a.kt)("inlineCode",{parentName:"p"},"https://web.telegram.org"),". To allow\nsending events to other origins, you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"targetOrigin")," options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const unsafeBridge = init({targetOrigin: '*'});\n// or\nconst safeBridge = init({targetOrigin: 'https://myendpoint.org'});\n")),(0,a.kt)("p",null,"Additionally, you could use ",(0,a.kt)("inlineCode",{parentName:"p"},"postEvent"),"s ",(0,a.kt)("inlineCode",{parentName:"p"},"targetOrigin")," option. This will\noverride origin passed during initialization:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const bridge = init({targetOrigin: '*'});\nbridge.postEvent('web_app_close', {targetOrigin: 'https://myendpoint.org'})\n")),(0,a.kt)("h2",{id:"calling-methods"},"Calling methods"),(0,a.kt)("p",null,"To call Web Apps methods, it is enough to call ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge"),"s ",(0,a.kt)("inlineCode",{parentName:"p"},"postEvent")," method.\nThis method automatically finds correct way of sending event which depends\non current environment. Let's take a look on simple example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from 'twa-bridge';\n\nconst bridge = init();\n\n// Close current application.\nbridge.postEvent('web_app_close')\n")),(0,a.kt)("p",null,"Some events don't require parameters, and they can be called without additional\nsecond parameter which represents event payload. But there are some events,\nwhich have arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {init} from 'twa-bridge';\n\nconst bridge = init();\n\n// Open new popup.\nbridge.postEvent('web_app_open_popup', {\n  title: 'Web Apps Notification',\n  message: 'I love Web Apps',\n  buttons: [{type: 'ok', id: 'ok'}]\n});\n")),(0,a.kt)("h3",{id:"without-bridge"},"Without bridge"),(0,a.kt)("p",null,"This library allows calling methods without creating new Bridge instance. To\nperform this, you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"postEvent")," function which has the same\ntype as ",(0,a.kt)("inlineCode",{parentName:"p"},"bridge.postEvent")," (actually, bridge uses ",(0,a.kt)("inlineCode",{parentName:"p"},"postEvent")," function\ninternally):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {postEvent} from 'twa-bridge';\n\npostEvent('web_app_setup_back_button', {is_visible: true});\n")),(0,a.kt)("p",null,"Nevertheless, sometimes you need to handle event sent from native app which is\nemitted as a response to posted event. For example, you would like to\ncall ",(0,a.kt)("inlineCode",{parentName:"p"},"web_app_request_theme")," event. As a result, native app will emit\n",(0,a.kt)("inlineCode",{parentName:"p"},"theme_changed")," event. Using default bridge init flow, this event will\nbe captured by bridge instance. We can't say the same about bare ",(0,a.kt)("inlineCode",{parentName:"p"},"postEvent")," function,\nso, do not forget about response event (if it exists) handling process."),(0,a.kt)("h2",{id:"listening-to-events"},"Listening to events"),(0,a.kt)("p",null,"Tracking of events is rather simple thing too. For this purpose, we could\nuse such methods as ",(0,a.kt)("inlineCode",{parentName:"p"},"on")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe"),". To remove event listeners, we\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"off")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"unsubscribe"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BridgeEventListener, init} from 'twa-bridge';\nimport {GlobalListener} from 'twa-core';\n\nconst bridge = init();\nconst listener: BridgeEventListener<'viewport_changed'> = payload => {\n  console.log('Viewport changed:', payload)\n};\nconst globalListener: GlobalListener = (event, ...args) => {\n  console.log('Event was called:', event, ...args);\n};\n\n// Add event listener.\nbridge.on('viewport_changed', listener);\n\n// Add any event listener.\nbridge.subscribe(globalListener);\n\n// Remove event listeners.\nbridge.off('viewport_changed', listener);\nbridge.unsubscribe(globalListener);\n")),(0,a.kt)("h2",{id:"lower-level-control"},"Lower level control"),(0,a.kt)("p",null,"Previously, we used such function as ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," almost without any parameters,\nbut this method supports some more additional options."),(0,a.kt)("h3",{id:"definereceiver-boolean"},(0,a.kt)("inlineCode",{parentName:"h3"},"defineReceiver: boolean")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," sets this value as ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". It leads to call of function\nnamed ",(0,a.kt)("inlineCode",{parentName:"p"},"defineEventReceiver")," which defines global function, handling events\nfrom native application and emitting window ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," event."),(0,a.kt)("p",null,"It is safe to use this function as many times as required. This function\nwill run only once."),(0,a.kt)("p",null,"In spite of it is not recommended, you could set this option to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".\nThis will lead to not handling of events in iOS, Android and desktop\nversions of Telegram, unless some additional actions are done."),(0,a.kt)("h3",{id:"emitter-globaleventemitter"},(0,a.kt)("inlineCode",{parentName:"h3"},"emitter: GlobalEventEmitter")),(0,a.kt)("p",null,"Bridge itself is not listening to window ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," event or events sent\nfrom Telegram native application directly. It expects passing event emitter\nthat is responsible for this kind of job."),(0,a.kt)("p",null,"This way of working with events allows us to normally subscribe to and\nunsubscribe from such events."),(0,a.kt)("p",null,"In case, this property is not passed, function will create required event\nemitter which will be shared between other ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," instances."),(0,a.kt)("h2",{id:"checking-method-support"},"Checking method support"),(0,a.kt)("p",null,"Bridge itself does not check if Web App method is supported by current\nversion of Web App. To check, if method is supported, you could use ",(0,a.kt)("inlineCode",{parentName:"p"},"supports"),"\nfunction:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import {supports} from 'twa-bridge';\n\nsupports('web_app_trigger_haptic_feedback', '6.0'); // false\nsupports('web_app_trigger_haptic_feedback', '6.1'); // true\n")),(0,a.kt)("h2",{id:"higher-level-control"},"Higher-level control"),(0,a.kt)("p",null,"As long as bridge provides only low-level control, we recommend using\n",(0,a.kt)("a",{parentName:"p",href:"twa-sdk/about"},"SDK"),", which implements bridge methods. It also provides\nadditional parameters checks, more intuitive method names and easier usage."))}g.isMDXComponent=!0}}]);